pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: python
    image: python:3.8
    command: ['cat']
    tty: true
"""
        }
    }

    environment {
        redmineApiKey = credentials('redmine_api_key')
    }
    
    stages {
        stage('Download Build Artifacts') {
            steps {
                cleanWs()
                copyArtifacts(projectName: 'jinho_test(build)', selector: lastSuccessful())
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                container('python') {
                    sh '''
                        chmod +x mvnw
                        pip3 install --upgrade pip
                        pip3 install virtualenv
                        pip3 install fosslight_scanner
                        echo "Python 환경 및 fosslight 설치 완료"
                    '''
                }
            }
        }

        stage('Run FOSSLight Scanner') {
            steps {
                container('python') {
                    sh '''
                        virtualenv -p /usr/local/bin/python3.8 /venv
                        . /venv/bin/activate
                        which fosslight
                        fosslight --version
                        fosslight all -p . -o test-result
                    '''
                }
            }
        }

        stage('Archive Reports') {
            steps {
                archiveArtifacts artifacts: 'test-result/*', allowEmptyArchive: true
            }
        }
        
        stage('FOSSLight report') {
            steps {
                script {
                    // 1. 이슈 생성
                    // 2. zip 파일 생성
                    // 3. zip 파일 이슈에 첨부
        
                    // 1. 이슈 생성
        
                    // 이슈 생성 데이터 구성
                    def issueSubject = "${env.JOB_NAME}[${currentBuild.number}]:FOSSLight Scanner Report"
                    def redmineIssueData = [
                        issue: [
                            project_id: 1,
                            tracker_id: 12,
                            subject: issueSubject,
                            description: "FOSSLight Scanner Report"
                        ]
                    ]
        
                    // Redmine 이슈 생성
                    def createIssueResponse = httpRequest(
                        httpMode: 'POST',
                        url: 'https://redmine.toolchain.co.kr/issues.json',
                        acceptType: 'APPLICATION_JSON',
                        contentType: 'APPLICATION_JSON',
                        customHeaders: [[name: 'X-Redmine-API-Key', value: redmineApiKey]],
                        requestBody: groovy.json.JsonOutput.toJson(redmineIssueData)
                    )
        
                    // 생성된 이슈의 ID 추출
                    def issueId = readJSON(text: createIssueResponse.content).issue.id
                    echo "Created Issue ID: ${issueId}"
                    
                    // 2. xlsx 파일 찾기
                    def xlsxFile = sh(script: "ls test-result/*.xlsx | head -n 1", returnStdout: true).trim()
                    
                    if (xlsxFile == "") {
                        error "No xlsx file found in test-result directory"
                    }
        
                    // 3. 이슈에 xlsx 파일 첨부
        
                    // Upload the file
                    def uploadResponse = httpRequest(
                        url: "https://redmine.toolchain.co.kr/uploads.json",
                        httpMode: 'POST',
                        customHeaders: [[name: 'X-Redmine-API-Key', value: redmineApiKey], [name: 'Content-Type', value: 'application/octet-stream']],
                        requestBody: readFile(file: xlsxFile, encoding: 'ISO-8859-1'),
                        validResponseCodes: '201'
                    )
                
                    def uploadToken = readJSON(text: uploadResponse.content).upload.token
                    echo "Upload Token: ${uploadToken}"
                
                    // Attach the file to the issue
                    def attachmentData = [
                        issue: [
                            uploads: [
                                [
                                    token: uploadToken,
                                    filename: xlsxFile.split('/').last(),
                                    content_type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                                ]
                            ]
                        ]
                    ]
                
                    httpRequest(
                        url: "https://redmine.toolchain.co.kr/issues/${issueId}.json",
                        httpMode: 'PUT',
                        contentType: 'APPLICATION_JSON',
                        customHeaders: [[name: 'X-Redmine-API-Key', value: redmineApiKey]],
                        requestBody: groovy.json.JsonOutput.toJson(attachmentData)
                    )
                }
            }
        }
    }
}
