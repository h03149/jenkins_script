pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: nodejs
    image: node:22-alpine
    securityContext:
      runAsUser: 0
    command:
    - cat
    tty: true
"""
        }
    }

    parameters {
        string(name: 'TARGET_URLS', defaultValue: '', description: '검사할 URL들을 콤마로 구분하여 입력하세요.')
    }

    environment {
        GIT_URL = 'https://gitea.toolchain.co.kr/k933167h/Lighthouse.git'
        GIT_BRANCH = 'master' // 필요한 경우 브랜치를 수정하세요
        REDMINE_API_KEY = credentials('redmine_api_key')
    }

    stages {
        stage('Validate Parameters') {
            steps {
                script {
                    if (!params.TARGET_URLS?.trim()) {
                        error "TARGET_URLS 파라미터가 설정되지 않았습니다. 파이프라인을 종료합니다."
                    }

                    def urls = params.TARGET_URLS.split(',').collect { it.trim() }
                    def invalidUrls = urls.findAll { url ->
                        !url.startsWith('http://') && !url.startsWith('https://')
                    }

                    if (invalidUrls) {
                        error "다음 URL들이 유효하지 않습니다: ${invalidUrls.join(', ')}. 파이프라인을 종료합니다."
                    }
                }
            }
        }

        stage('Clone Repository') {
            steps {
                container('nodejs') {
                    script {
                        sh 'apk add git chromium'
                        sh "git clone ${env.GIT_URL} ."
                        sh "git config --global user.name 'jinho.han'"
                        sh "git config --global user.email 'jinho.han@kt.com'"
                        sh 'git config --global --add safe.directory ${WORKSPACE}'
                        sh "git checkout ${env.GIT_BRANCH}"
                        
                        def currentTime = new Date().format("MM.dd HH:mm")
                        def urls = params.TARGET_URLS.split(',').collect { it.trim() }
                        def logEntry = "Time: ${currentTime}\nURLs:\n${urls.join('\n')}\n"
                        
                        sh "echo '${logEntry}' >> log.txt"
                        sh 'git add log.txt'
                        sh "git commit -m '[${currentTime}]: ${urls[0]} 외 ${urls.size() - 1}'"
                        
                        withCredentials([string(credentialsId: 'gitea_token', variable: 'GITEA_TOKEN')]) {
                            sh 'git push https://${GITEA_TOKEN}@gitea.toolchain.co.kr/k933167h/Lighthouse.git'
                        }
                    }
                }
            }
        }

        stage('Prepare Environment') {
            steps {
                container('nodejs') {
                    script {
                        def urls = params.TARGET_URLS.split(',').collect { it.trim() }
                        def urlList = urls.collect { "'${it}'" }.join(', ')
                        
                        writeFile file: 'lighthouserc.js', text: """
module.exports = {
  ci: {
    collect: {
      url: [${urlList}],
      settings: {
        chromeFlags: ['--no-sandbox'],
        preset: 'desktop',
        emulatedFormFactor: 'desktop',
        locale: 'ko',
        screenEmulation: {
          mobile: false,
          width: 1920,
          height: 1080,
          deviceScaleFactor: 1,
          disabled: false
        }
      }
    },
    upload: {
      target: 'filesystem',
      outputDir: './lighthouse-results',
    },
  },
};
"""
                        env.LHCI_BUILD_CONTEXT__CURRENT_HASH = sh(returnStdout: true, script: "git rev-parse HEAD").trim()
                        sh 'npm install -g @lhci/cli'
                        sh 'lhci autorun'
                        sh 'ls -R'
                        // Upload Lighthouse CI server
                        sh 'lhci upload --target=lhci --serverBaseUrl="https://lhserver.toolchain.co.kr" --token="fdd8e4df-4880-44c2-9532-5bedd5651139"'
                    }
                }
            }
        }

        stage('Create Redmine Issues') {
            steps {
                container('nodejs') {
                    script {
                        def resultsDir = "./lighthouse-results"
                        def manifest = readJSON file: "${resultsDir}/manifest.json"

                        params.TARGET_URLS.split(',').each { url ->
                            url = url.trim()

                            echo "Checking URL: ${url}"
                            echo "Manifest: ${manifest}"

                            // 매니페스트의 URL을 정규화하여 비교
                            def matchingEntries = manifest.findAll { manifestEntry ->
                                def manifestUrl = manifestEntry.url
                                if (!manifestUrl.endsWith('/')) {
                                    manifestUrl += '/'
                                }
                                if (!url.endsWith('/')) {
                                    url += '/'
                                }
                                return manifestUrl == url
                            }

                            echo "Matching Entries: ${matchingEntries}"
                            def htmlPaths = matchingEntries.collect { it.htmlPath }

                            if (htmlPaths.isEmpty()) {
                                error "Could not find HTML report for URL: ${url}"
                            }

                            def hash = env.LHCI_BUILD_CONTEXT__CURRENT_HASH
                            def performance = matchingEntries.collect { it.summary.performance }.sum() / matchingEntries.size() * 100
                            def accessibility = matchingEntries.collect { it.summary.accessibility }.sum() / matchingEntries.size() * 100
                            def bestPractices = matchingEntries.collect { it.summary['best-practices'] }.sum() / matchingEntries.size() * 100
                            def seo = matchingEntries.collect { it.summary.seo }.sum() / matchingEntries.size() * 100

                            def issueDescription = """
결과
  . 성능 : ${performance}
  . 접근성 : ${accessibility}
  . 권장사항 : ${bestPractices}
  . 검색엔진 최적화 : ${seo}
-----
평가 기준
emulatedFormFactor : desktop
screenEmulation: 
 . mobile: false
 . width: 1920
 . height: 1080
 . deviceScaleFactor: 1
"""

                            def issueSubject = "[${hash}][${url}] Lighthouse Result"
                            def redmineIssueData = [
                                issue: [
                                    project_id: 1,
                                    tracker_id: 8,
                                    subject: issueSubject,
                                    description: issueDescription
                                ]
                            ]

                            // Redmine 이슈 생성
                            def createIssueResponse = httpRequest(
                                httpMode: 'POST',
                                url: 'https://redmine.toolchain.co.kr/issues.json',
                                acceptType: 'APPLICATION_JSON',
                                contentType: 'APPLICATION_JSON',
                                customHeaders: [[name: 'X-Redmine-API-Key', value: env.REDMINE_API_KEY]],
                                requestBody: groovy.json.JsonOutput.toJson(redmineIssueData)
                            )

                            def issueId = readJSON(text: createIssueResponse.content).issue.id
                            echo "Created Issue ID: ${issueId}"

                            def zipFilePath = "${resultsDir}/lighthouse-reports-${hash}.zip"
                            def sourceDir = resultsDir
                            
                            // Ensure the Jenkins workspace has correct permissions
                            sh "chmod -R 777 ${resultsDir}"

                            // 파일명만 추출하여 상대 경로로 사용
                            def relativeHtmlPaths = htmlPaths.collect { it.split('/').last() }.join(',')
                            
                            // HTML 파일들을 zip 파일로 압축
                            zip zipFile: zipFilePath, archive: false, dir: sourceDir, glob: relativeHtmlPaths, overwrite: true

                            // 3. 이슈에 zip 파일 첨부
                            // Upload the file
                            def uploadResponse = httpRequest(
                                url: "https://redmine.toolchain.co.kr/uploads.json",
                                httpMode: 'POST',
                                customHeaders: [[name: 'X-Redmine-API-Key', value: env.REDMINE_API_KEY], [name: 'Content-Type', value: 'application/octet-stream']],
                                requestBody: readFile(file: zipFilePath, encoding: 'ISO-8859-1'),
                                validResponseCodes: '201'
                            )

                            def uploadToken = readJSON(text: uploadResponse.content).upload.token
                            echo "Upload Token: ${uploadToken}"

                            // Attach the file to the issue
                            def attachmentData = [
                                issue: [
                                    uploads: [
                                        [
                                            token: uploadToken,
                                            filename: "lighthouse-reports-${hash}.zip",
                                            content_type: 'application/zip'
                                        ]
                                    ]
                                ]
                            ]

                            httpRequest(
                                url: "https://redmine.toolchain.co.kr/issues/${issueId}.json",
                                httpMode: 'PUT',
                                contentType: 'APPLICATION_JSON',
                                customHeaders: [[name: 'X-Redmine-API-Key', value: env.REDMINE_API_KEY]],
                                requestBody: groovy.json.JsonOutput.toJson(attachmentData)
                            )
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            container('nodejs') {
                cleanWs()
            }
        }
    }
}
