pipeline {
    agent any
    
    tools { nodejs "nodejs" }

    environment {
        redmineApiKey = credentials('redmine_api_key') // Jenkins credential store에서 Redmine API 키를 가져옵니다.
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'http://b5789b14b9eaea265ed6c1b330a4a8ec2d33a51e@gitea:3000/jinho.han/playwright.git', branch: 'master'
            }
        }
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
                sh 'npx playwright install'
                //sh 'npx playwright install-deps'
                sh 'npx playwright test'
            }
        }
    }

    post {
        always {
            script {

                def gitUrl = sh(script: 'git remote get-url origin', returnStdout: true).trim()
                    
                // URL에서 리포지토리 이름을 추출
                def repoName = gitUrl.tokenize('/').last().replaceAll('.git$', '')

                def playwrightResult = currentBuild.result ?: 'SUCCESS'

                // 일감 생성
                def currentTime = new Date().format('yy.MM.dd HH:mm')
                def PlaywrightIssueTitle = "[${repoName}][${env.JOB_NAME}][${currentBuild.number}]-[${playwrightResult}]"
                def PlaywrightIssueDescription = """
실행 시간: ${currentTime}
Pass: count 추가 예정
Fail: count 추가 예정
Skip: count 추가 예정
"""
    
                def PlaywrightIssueData = [
                    issue: [
                        project_id: 6,
                        tracker_id: 10,
                        subject: PlaywrightIssueTitle,
                        description: PlaywrightIssueDescription
                    ]
                ]
    
                def PlaywrightIssueResponse = httpRequest(
                    httpMode: 'POST',
                    url: 'http://redmine:3000/issues.json',
                    acceptType: 'APPLICATION_JSON',
                    contentType: 'APPLICATION_JSON',
                    customHeaders: [[name: 'X-Redmine-API-Key', value: redmineApiKey]],
                    requestBody: groovy.json.JsonOutput.toJson(PlaywrightIssueData)
                )
    
                def PlaywrightIssueId = readJSON(text: PlaywrightIssueResponse.content).issue.id
                println("Created parent Redmine issue: ${PlaywrightIssueId}")
    
                // HTML 보고서 첨부
                def htmlFilePath = "playwright-report/index.html"
    
                // Upload the file
                def uploadResponse = httpRequest(
                    url: "http://redmine:3000/uploads.json",
                    httpMode: 'POST',
                    customHeaders: [[name: 'X-Redmine-API-Key', value: redmineApiKey], [name: 'Content-Type', value: 'application/octet-stream']],
                    requestBody: readFile(file: htmlFilePath, encoding: 'ISO-8859-1'),
                    validResponseCodes: '201'
                )
    
                def uploadToken = readJSON(text: uploadResponse.content).upload.token
                echo "Upload Token: ${uploadToken}"
    
                // Attach the file to the issue
                def attachmentData = [
                    issue: [
                        uploads: [
                            [
                                token: uploadToken,
                                filename: 'index.html',
                                content_type: 'text/html'
                            ]
                        ]
                    ]
                ]
    
                httpRequest(
                    url: "http://redmine:3000/issues/${PlaywrightIssueId}.json",
                    httpMode: 'PUT',
                    contentType: 'APPLICATION_JSON',
                    customHeaders: [[name: 'X-Redmine-API-Key', value: redmineApiKey]],
                    requestBody: groovy.json.JsonOutput.toJson(attachmentData)
                )
            }  
            archiveArtifacts artifacts: 'playwright-report/**/*', allowEmptyArchive: true
        }
    }
}
